{
  "name": "rethinkdbdash",
  "version": "1.15.3",
  "description": "A Node.js driver for RethinkDB with promises and a connection pool",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --check-leaks --harmony-generators -t 20000"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/neumino/rethinkdbdash"
  },
  "keywords": [
    "rethinkdb",
    "driver",
    "nodejs"
  ],
  "author": {
    "name": "Michel Tu",
    "email": "orphee@gmail.com",
    "url": "http://justonepixel.com/"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/neumino/rethinkdbdash/issues"
  },
  "dependencies": {
    "bluebird": ">= 2.0.0"
  },
  "devDependencies": {
    "mocha": ">= 1.20.0"
  },
  "gitHead": "c3ee0a9199b3cc80bd4917cccad0d63668a468d1",
  "readme": "rethinkdbdash\n=============\n\n<a href=\"https://app.wercker.com/project/bykey/10e69719c2031f4995798ddb9221c398\"><img alt=\"Wercker status\" src=\"https://app.wercker.com/status/10e69719c2031f4995798ddb9221c398/m/master\" align=\"right\" /></a>\n\nAn experimental (yet stable) Node.js driver for RethinkDB with promises and a connection pool.\n\n_Note_: To use `yield` as shown in the examples, you have to start `node` unstable (>= 0.11) with\nthe `--harmony` flag.\n\n\n### Quick start ###\n-------------\n\n- Example with promises but without generators:\n\n```js\nvar r = require('rethinkdbdash')();\nr.table(\"foo\").get(\"bar\").run().then(function(result) {\n    console.log(JSON.stringify(result, null, 2));\n}).error(function(err) {\n    console.log(err);\n});\n```\n\n- Example with callback:\n\n```js\nvar r = require('rethinkdbdash')();\nr.table(\"foo\").get(\"bar\").run(function(err, result) {\n    if (err) {\n        return console.log(err);\n    }\n    console.log(JSON.stringify(result, null, 2));\n})\n```\n\n\n- Example wih [koa](https://github.com/koajs/koa):\n\n```js\nvar app = require('koa')();\nvar r = require('rethinkdbdash')();\n\napp.use(function *(){\n    var result = yield r.table(\"foo\").get(\"bar\");\n\n    this.body = JSON.stringify(result);\n});\n\napp.listen(3000);\n```\nNote: You have to start node with the `--harmony` flag.\n\n\n- Example with [bluebird](https://github.com/petkaantonov/bluebird):\n\n```js\nvar Promise = require('bluebird');\nvar r = require('rethinkdbdash')();\n\nvar run = Promise.coroutine(function* () {\n    var result\n\n    try{\n        result = yield r.table(\"foo\").get(\"bar\");\n        console.log(JSON.stringify(result, null, 2));\n    }\n    catch(e) {\n        console.log(e);\n    }\n})();\n```\nNote: You have to start node with the `--harmony` flag.\n\n\n\n### Install ###\n-------------\n\n```\nnpm install rethinkdbdash\n```\n\nThe `rethinkdbdash-unstable` package is a relic from the past when the driver had a dependency on `node-protobuf`.\n\n\n### Documentation ###\n-------------\nWhile rethinkdbdash uses almost the same syntax as the official driver, there are still\na few differences.\n\nThis section references all the differences. For all the other methods not\nmentioned here, please refer to the\n[official driver's documentation](http://www.rethinkdb.com/api/javascript/).\n\n\n\nThe differences are:\n\n#### Module name ####\n\nImport rethinkdbdash:\n```js\nvar r = require('rethinkdbdash')(options);\n```\n\n`options` can be:\n- `{pool: false}` -- if you do not want to use a connection pool.\n- the options for the connection pool, which can be:\n\n```js\n{\n    buffer: <number>, // minimum number of connections available in the pool, default 50\n    max: <number>, // maximum number of connections in the pool, default 1000\n    timeout: <number>, // number of seconds for a connection to be opened, default 20\n    timeoutError: <number>, // wait time before reconnecting in case of an error (in ms), default 1000\n    timeoutGb: <number>, // how long the pool keep a connection that hasn't been used (in ms), default 60*60*1000\n    maxExponent: <number>, // the maximum timeout before trying to reconnect is 2^maxExponent*timeoutError, default 6 (~60 seconds for the longest wait)\n    silent: <boolean> // console.error errors (default false)\n    cursor: <boolean> // if you want a cursor by default instead of an array or feed, default false\n    stream: <boolean> // if you want a stream by default instead of an array or feed, default false\n}\n```\n\n\n#### Promises ####\n\nRethinkDB official driver support both syntaxes (promises and callback) since 1.13 (used to support only callback).\nRethinkdbdash support both syntaxes (promises and callback) since 1.14 (used to support only promises).\n\nRethinkdbdash implements `then`, `catch` and `error` as a shortcut for `run().then/catch/error`. So if you use\n`yield`, you basically do not have to call `run` at the end of a query.\n\n\n#### Connection pool ####\n\nRethinkdbdash implements a connection pool and is created by default.\n\nIf you do not want to use a connection pool, iniitialize rethinkdbdash with `{pool: false}` like this:\n```js\nvar r = require('rethinkdbdash')({pool: false});\n```\n\nYou can provide options for the connection pool with the following syntax:\n```js\nvar r = require('rethinkdbdash')({\n    buffer: <number>, // minimum number of connections available in the pool, default 50\n    max: <number>, // maximum number of connections in the pool, default 1000\n    timeout: <number>, // number of seconds for a connections to be opened, default 20\n    timeoutError: <number>, // wait time before reconnecting in case of an error (in ms), default 1000\n    timeoutGb: <number>, // how long the pool keep a connection that hasn't been used (in ms), default 60*60*1000\n    maxExponent: <number>, // the maximum timeout before trying to reconnect is 2^maxExponent*timeoutError, default 6 (~60 seconds for the longest wait)\n    silent: <boolean> // console.error errors (default false)\n});\n\ntry {\n    var cursor = yield r.table(\"foo\").run();\n    var result = yield cursor.toArray(); // The connection used in the cursor will be released when all the data will be retrieved\n}\ncatch(e) {\n    console.log(e.message);\n}\n```\n\nGet the number of connections\n```js\nr.getPool().getLength();\n```\n\nGet the number of available connections\n```js\nr.getPool().getAvailableLength();\n```\n\nDrain the pool\n```js\nr.getPool().drain();\n```\n\n\nThe pool can emits emits:\n- `draining`: when `drain` is called\n- `queueing`: when a query is added/removed from the queue (queries waiting for a connection), the size of the queue is provided\n- `size`: when the number of connections changes, the number of connections is provided\n- `available-size`: when the number of available connections changes, the number of available connections is provided\n\n__Note__: If a query returns a cursor, the connection will not be released as long as the\ncursor hasn't fetched everything or has been closed.\n\n\n#### Cursor ####\n\nRethinkdbdash automatically coerce cursor to arrays. If you need a raw cursor, you can call the\n`run` command with the option `{cursor: true}` or import the driver with `{cursor: true}`.\n\n```js\nvar result = yield r.expr([1, 2, 3]).run()\nconsole.log(JSON.stringify(result)) // print [1, 2, 3]\n\n// Or with a cursor\nvar cursor = yield r.expr([1, 2, 3]).run({cursor: true})\nvar result = yield cursor.toArray();\n\nconsole.log(JSON.stringify(result)) // print [1, 2, 3]\n```\n\n#### Stream ####\n\nRethinkdbdash automatically coerce cursor to arrays. If you need a stream, you can call the\n`run` command with the option `{stream: true}` or import the driver with `{stream: true}`.\n\n```js\nvar result = yield r.expr([1, 2, 3]).run()\nconsole.log(JSON.stringify(result)) // print [1, 2, 3]\n\n// Or with a cursor\nvar cursor = yield r.expr([1, 2, 3]).run({cursor: true})\nvar result = yield cursor.toArray();\n\nconsole.log(JSON.stringify(result)) // print [1, 2, 3]\n```\n\n_Note_: Make sure to not pass the option `cursor: true` or a cursor will be returned.\n\n\n#### Errors ####\n- Better backtraces\n\nLong backtraces are split on multiple lines.  \nIn case the driver cannot serialize the query, it provides a better location of the error.\n\n- Arity errors\n\nThe server may return confusing error messages when the wrong number\nof arguments is provided (See [issue 2463](https://github.com/rethinkdb/rethinkdb/issues/2463) to track progress).\nRethinkdbdash tries to make up for it by catching errors before sending\nthe query to the server if possible.\n\n\n#### Miscellaneous ####\n\n\n- Maximum nesting depth\n\nThe maximum nesting depth is your documents is by default 100 (instead of 20).\nYou can also change this setting with:\n\n```js\nr.setNestingLevel(<number>)\n```\n\n\n- Maximum array length\n\nThe maximum array length in your result is by default 100000. You can change this limit with\nthe option `arrayLimit` in `run`, or set it per instance of `r` with:\n\n```js\nr.setArrayLimit(<number>)\n```\n\n- Performance\n\nThe tree representation of the query is built step by step and stored which avoid\nrecomputing it if the query is re-run.  \n\nThe code was partially optimized for v8, and is written in pure JavaScript which avoids\nerrors like [issue #2839](https://github.com/rethinkdb/rethinkdb/issues/2839)\n\n- Connection\n\nIf you do not wish to use rethinkdbdash connection pool, you can implement yours. The\nconnections created with rethinkdbdash emits a \"release\" event when they receive an\nerror, an atom, or the end (or full) sequence.\n\nA connection can also emit a \"timeout\" event if the underlying connection times out.\n\n- `undefined` values in an object\n\nRethinkdbdash will ignore the keys/values where the value is `undefined`.\n\n### Run tests ###\n-------------\n\nUpdate `test/config.js` if your RethinkDB instance doesn't run on the default parameters.\n\nRun\n```\nnpm test\n```\n\n\nTests are also being run on [wercker](http://wercker.com/):\n- Builds: [https://app.wercker.com/#applications/52dffe8ba4acb3ef16010ef8/tab](https://app.wercker.com/#applications/52dffe8ba4acb3ef16010ef8/tab)\n- Box: \n  - Github: [https://github.com/neumino/box-rethinkdbdash](https://github.com/neumino/box-rethinkdbdash)\n  - Wercker builds: [https://app.wercker.com/#applications/52dffc65a4acb3ef16010b60/tab](https://app.wercker.com/#applications/52dffc65a4acb3ef16010b60/tab)\n",
  "homepage": "https://github.com/neumino/rethinkdbdash",
  "_id": "rethinkdbdash@1.15.3",
  "_shasum": "f300961819a13faece8e752a554240f2bc81f929",
  "_from": "../../../../var/folders/3p/9ddgvq0x315b66xb_64t_m0mfs5nnz/T/npm-79967-3b03012b/1422659249189-0.023331363685429096/c3ee0a9199b3cc80bd4917cccad0d63668a468d1",
  "_resolved": "git+https://github.com/neumino/rethinkdbdash#c3ee0a9199b3cc80bd4917cccad0d63668a468d1"
}
