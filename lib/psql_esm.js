// Generated by CoffeeScript 1.7.1
(function() {
  var CounterStream, EventStoreMapper, Transform, copyFrom, drop_tables, fs, get_list_to_size, init_action_table, init_events_table, init_tables, pg, q, split, unique_rows,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require('q');

  fs = require('fs');

  split = require('split');

  pg = require('pg');

  copyFrom = require('pg-copy-streams').from;

  unique_rows = function(rows, row) {
    var r, unique, _i, _len;
    unique = {};
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      r = rows[_i];
      unique[r[row]] = r[row];
    }
    return Object.keys(unique);
  };

  get_list_to_size = (function(_this) {
    return function(fn, i, list, size) {
      if (list.length > size) {
        return q.fcall(function() {
          return list;
        });
      }
      return fn(i).then(function(new_list) {
        if (new_list === null) {
          return q.fcall(function() {
            return list;
          });
        }
        new_list = list.concat(new_list);
        i = i + 1;
        return get_list_to_size(fn, i, new_list, size);
      });
    };
  })(this);

  Transform = require('stream').Transform;

  CounterStream = (function(_super) {
    __extends(CounterStream, _super);

    function CounterStream() {
      return CounterStream.__super__.constructor.apply(this, arguments);
    }

    CounterStream.prototype._transform = function(chunk, encoding, done) {
      this.count |= 0;
      if (chunk.toString().trim() !== '') {
        this.count += 1;
      }
      this.push(chunk);
      return done();
    };

    return CounterStream;

  })(Transform);

  init_events_table = function(knex, schema) {
    return knex.schema.createTable("" + schema + ".events", function(table) {
      table.increments();
      table.string('person').index().notNullable();
      table.string('action').index().notNullable();
      table.string('thing').index().notNullable();
      table.timestamp('created_at').notNullable();
      return table.timestamp('expires_at');
    });
  };

  init_action_table = function(knex, schema) {
    return knex.schema.createTable("" + schema + ".actions", function(table) {
      table.increments();
      table.string('action').unique().index().notNullable();
      table.integer('weight').notNullable();
      table.timestamp('created_at').notNullable();
      return table.timestamp('updated_at').notNullable();
    });
  };

  drop_tables = function(knex, schema) {
    if (schema == null) {
      schema = 'public';
    }
    return q.all([knex.schema.dropTableIfExists("" + schema + ".events"), knex.schema.dropTableIfExists("" + schema + ".actions")]).then(function() {
      return knex.schema.raw("DROP SCHEMA IF EXISTS " + schema);
    });
  };

  init_tables = function(knex, schema) {
    if (schema == null) {
      schema = 'public';
    }
    return q.when(knex.schema.raw("CREATE SCHEMA IF NOT EXISTS " + schema)).then((function(_this) {
      return function() {
        return q.all([init_events_table(knex, schema), init_action_table(knex, schema)]);
      };
    })(this));
  };

  EventStoreMapper = (function() {
    function EventStoreMapper(knex, schema, limits) {
      this.knex = knex;
      this.schema = schema != null ? schema : 'public';
      if (limits == null) {
        limits = {};
      }
      this.get_people_that_actioned_thing = __bind(this.get_people_that_actioned_thing, this);
      this.get_things_that_actioned_person = __bind(this.get_things_that_actioned_person, this);
      this.get_people_that_actioned_things = __bind(this.get_people_that_actioned_things, this);
      this.get_things_that_actioned_people = __bind(this.get_things_that_actioned_people, this);
      this.similar_objects_limit = limits.similar_objects_limit || 100;
      this.things_limit = limits.things_limit || 100;
      this.people_limit = limits.people_limit || 100;
    }

    EventStoreMapper.prototype.drop_tables = function() {
      return drop_tables(this.knex, this.schema);
    };

    EventStoreMapper.prototype.init_tables = function() {
      return init_tables(this.knex, this.schema);
    };

    EventStoreMapper.prototype.add_event = function(person, action, thing, expires_at) {
      if (expires_at == null) {
        expires_at = null;
      }
      return q.all([this.add_action(action), this.add_event_to_db(person, action, thing, expires_at)]);
    };

    EventStoreMapper.prototype.add_action = function(action) {
      return this.set_action_weight(action, 1, false);
    };

    EventStoreMapper.prototype.add_event_to_db = function(person, action, thing, expires_at) {
      var now;
      if (expires_at == null) {
        expires_at = null;
      }
      now = new Date().toISOString();
      return this.knex("" + this.schema + ".events").insert({
        person: person,
        action: action,
        thing: thing,
        created_at: now,
        expires_at: expires_at
      });
    };

    EventStoreMapper.prototype.set_action_weight = function(action, weight, overwrite) {
      var insert, now, query, update, update_attr;
      if (overwrite == null) {
        overwrite = true;
      }
      now = new Date().toISOString();
      insert = this.knex("" + this.schema + ".actions").insert({
        action: action,
        weight: weight,
        created_at: now,
        updated_at: now
      }).toString();
      insert = insert.replace(/\svalues\s\(/, " select ").slice(0, -1);
      update_attr = {
        action: action,
        updated_at: now
      };
      if (overwrite) {
        update_attr["weight"] = weight;
      }
      update = this.knex("" + this.schema + ".actions").where({
        action: action
      }).update(update_attr).toString();
      query = "BEGIN; LOCK TABLE " + this.schema + ".actions IN SHARE ROW EXCLUSIVE MODE; WITH upsert AS (" + update + " RETURNING *) " + insert + " WHERE NOT EXISTS (SELECT * FROM upsert); COMMIT;";
      return this.knex.raw(query);
    };

    EventStoreMapper.prototype.events_for_people_action_things = function(people, action, things) {
      if (people.length === 0 || things.length === 0) {
        return q.fcall(function() {
          return [];
        });
      }
      return this.knex("" + this.schema + ".events").where({
        action: action
      }).whereIn('person', people).whereIn('thing', things);
    };

    EventStoreMapper.prototype.has_person_actioned_thing = function(person, action, thing) {
      return this.has_event(person, action, thing);
    };

    EventStoreMapper.prototype.get_actions_of_person_thing_with_weights = function(person, thing) {
      return this.knex("" + this.schema + ".events").select("" + this.schema + ".events.action as key", "" + this.schema + ".actions.weight").leftJoin("" + this.schema + ".actions", "" + this.schema + ".events.action", "" + this.schema + ".actions.action").where({
        person: person,
        thing: thing
      }).orderBy('weight', 'desc');
    };

    EventStoreMapper.prototype.get_ordered_action_set_with_weights = function() {
      return this.knex("" + this.schema + ".actions").select('action as key', 'weight').orderBy('weight', 'desc');
    };

    EventStoreMapper.prototype.get_action_weight = function(action) {
      return this.knex("" + this.schema + ".actions").select('weight').where({
        action: action
      }).then(function(rows) {
        if (rows.length > 0) {
          return parseInt(rows[0].weight);
        } else {
          return null;
        }
      });
    };

    EventStoreMapper.prototype.get_things_that_actioned_people = function(people, action) {
      if (people.length === 0) {
        return q.fcall(function() {
          return [];
        });
      }
      return this.knex("" + this.schema + ".events").select('thing', 'created_at').where({
        action: action
      }).whereIn('person', people).orderBy('created_at', 'desc').then(function(rows) {
        var r, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          r = rows[_i];
          _results.push(r.thing);
        }
        return _results;
      });
    };

    EventStoreMapper.prototype.get_people_that_actioned_things = function(things, action) {
      if (things.length === 0) {
        return q.fcall(function() {
          return [];
        });
      }
      return this.knex("" + this.schema + ".events").select('person', 'created_at').where({
        action: action
      }).whereIn('thing', things).orderBy('created_at', 'desc').then(function(rows) {
        var r, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          r = rows[_i];
          _results.push(r.person);
        }
        return _results;
      });
    };

    EventStoreMapper.prototype.get_things_that_actioned_person = function(person, action) {
      return this.knex("" + this.schema + ".events").select('thing', 'created_at').where({
        person: person,
        action: action
      }).orderBy('created_at', 'desc').limit(this.things_limit).then(function(rows) {
        return unique_rows(rows, 'thing');
      });
    };

    EventStoreMapper.prototype.get_people_that_actioned_thing = function(thing, action) {
      return this.knex("" + this.schema + ".events").select('person', 'created_at').where({
        thing: thing,
        action: action
      }).orderBy('created_at', 'desc').limit(this.people_limit).then(function(rows) {
        return unique_rows(rows, 'person');
      });
    };

    EventStoreMapper.prototype.things_people_have_actioned = function(action, people) {
      return this.knex("" + this.schema + ".events").select('thing', 'created_at').where({
        action: action
      }).whereIn('person', people).orderBy('created_at', 'desc').limit(this.things_limit).then(function(rows) {
        return unique_rows(rows, 'thing');
      });
    };

    EventStoreMapper.prototype.things_jaccard_metric = function(thing1, thing2, action) {
      var intersection, q1, q2, union;
      q1 = this.knex("" + this.schema + ".events").select('person').distinct().where({
        thing: thing1,
        action: action
      }).toString();
      q2 = this.knex("" + this.schema + ".events").select('person').distinct().where({
        thing: thing2,
        action: action
      }).toString();
      intersection = this.knex.raw("" + q1 + " INTERSECT " + q2);
      union = this.knex.raw("" + q1 + " UNION " + q2);
      return q.all([intersection, union]).spread(function(int_count, uni_count) {
        var ret;
        ret = int_count.rowCount / uni_count.rowCount;
        if (isNaN(ret)) {
          return 0;
        }
        return ret;
      });
    };

    EventStoreMapper.prototype.people_jaccard_metric = function(person1, person2, action) {
      var intersection, q1, q2, union;
      q1 = this.knex("" + this.schema + ".events").select('thing').distinct().where({
        person: person1,
        action: action
      }).toString();
      q2 = this.knex("" + this.schema + ".events").select('thing').distinct().where({
        person: person2,
        action: action
      }).toString();
      intersection = this.knex.raw("" + q1 + " INTERSECT " + q2);
      union = this.knex.raw("" + q1 + " UNION " + q2);
      return q.all([intersection, union]).spread(function(int_count, uni_count) {
        var ret;
        ret = int_count.rowCount / uni_count.rowCount;
        if (isNaN(ret)) {
          return 0;
        }
        return ret;
      });
    };

    EventStoreMapper.prototype.has_event = function(person, action, thing) {
      return this.knex("" + this.schema + ".events").where({
        person: person,
        action: action,
        thing: thing
      }).then(function(rows) {
        return rows.length > 0;
      });
    };

    EventStoreMapper.prototype.has_action = function(action) {
      return this.knex("" + this.schema + ".actions").where({
        action: action
      }).then(function(rows) {
        return rows.length > 0;
      });
    };

    EventStoreMapper.prototype.count_events = function() {
      return this.knex("" + this.schema + ".events").count().then(function(count) {
        return parseInt(count[0].count);
      });
    };

    EventStoreMapper.prototype.count_actions = function() {
      return this.knex("" + this.schema + ".actions").count().then(function(count) {
        return parseInt(count[0].count);
      });
    };

    EventStoreMapper.prototype.bootstrap = function(stream) {
      var runner;
      runner = new this.knex.client.Runner(this.knex.client);
      return runner.ensureConnection().then((function(_this) {
        return function(connection) {
          var counter, deferred, pg_stream;
          runner.connection = connection;
          deferred = q.defer();
          pg_stream = runner.connection.query(copyFrom("COPY " + _this.schema + ".events (person, action, thing, created_at) FROM STDIN CSV"));
          counter = new CounterStream();
          stream.pipe(split(/^/gm)).pipe(counter).pipe(pg_stream).on('end', function() {
            return deferred.resolve(counter.count);
          }).on('error', function(error) {
            return deferred.reject(error);
          });
          return deferred.promise;
        };
      })(this))["finally"](function() {
        return runner.cleanupConnection();
      });
    };

    EventStoreMapper.prototype.remove_expired_events = function() {
      var now;
      now = new Date().toISOString();
      return this.knex("" + this.schema + ".events").where('expires_at', '<', now).del();
    };

    EventStoreMapper.prototype.remove_non_unique_events = function() {
      var query;
      query = "DELETE FROM " + this.schema + ".events e1 USING " + this.schema + ".events e2 WHERE e1.person = e2.person AND e1.action = e2.action AND e1.thing = e2.thing AND e1.created_at < e2.created_at";
      return this.knex.raw(query);
    };

    EventStoreMapper.prototype.remove_superseded_events = function() {
      return q.when(true);
    };

    EventStoreMapper.prototype.remove_excessive_user_events = function() {
      return q.when(true);
    };

    EventStoreMapper.prototype.remove_events_till_size = function(number_of_events) {
      return q.when(true);
    };

    return EventStoreMapper;

  })();

  EventStoreMapper.drop_tables = drop_tables;

  EventStoreMapper.init_tables = init_tables;

  if (typeof define !== 'undefined' && define.amd) {
    define([], function() {
      return EventStoreMapper;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = EventStoreMapper;
  }

}).call(this);
