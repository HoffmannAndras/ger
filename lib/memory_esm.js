// Generated by CoffeeScript 1.7.1
(function() {
  var EventStoreMapper, GER_Models, KeyManager, Set, SortedSet, Store, Utils, q,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  q = require('q');

  GER_Models = {};

  Set = (function() {
    function Set(ivals) {
      var iv, _i, _len;
      if (ivals == null) {
        ivals = [];
      }
      this.store = {};
      for (_i = 0, _len = ivals.length; _i < _len; _i++) {
        iv = ivals[_i];
        this.store[iv] = 1;
      }
    }

    Set.prototype.add = function(value) {
      return this.store[value] = 1;
    };

    Set.prototype.size = function() {
      return this.members().length;
    };

    Set.prototype.contains = function(value) {
      var v;
      if (Array.isArray(value)) {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            v = value[_i];
            _results.push(this.contains(v));
          }
          return _results;
        }).call(this)).reduce(function(x, y) {
          return x && y;
        });
      } else {
        return !!this.store[value];
      }
    };

    Set.prototype.union = function(set) {
      var v;
      return new Set((function() {
        var _i, _len, _ref, _results;
        _ref = this.members().concat(set.members());
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(v);
        }
        return _results;
      }).call(this));
    };

    Set.prototype.intersection = function(set) {
      var s1, s2, v;
      s1 = this.members();
      s2 = set.members();
      return new Set((function() {
        var _i, _len, _ref, _results;
        _ref = s1.concat(s2);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if ((s1.indexOf(v) !== -1) && (s2.indexOf(v) !== -1)) {
            _results.push(v);
          }
        }
        return _results;
      })());
    };

    Set.prototype.diff = function(set) {
      var s1, s2, v;
      s1 = this.members();
      s2 = set.members();
      return new Set((function() {
        var _i, _len, _ref, _results;
        _ref = s1.concat(s2);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if ((s1.indexOf(v) !== -1) && (s2.indexOf(v) === -1)) {
            _results.push(v);
          }
        }
        return _results;
      })());
    };

    Set.prototype.members = function() {
      return Object.keys(this.store);
    };

    return Set;

  })();

  SortedSet = (function(_super) {
    __extends(SortedSet, _super);

    function SortedSet() {
      return SortedSet.__super__.constructor.apply(this, arguments);
    }

    SortedSet.prototype.add = function(value, weight) {
      return this.store[value] = weight;
    };

    SortedSet.prototype.sorted_member_weight_list = function() {
      var k, v;
      return ((function() {
        var _ref, _results;
        _ref = this.store;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push({
            key: k,
            weight: v
          });
        }
        return _results;
      }).call(this)).sort(function(x, y) {
        return x.weight - y.weight;
      });
    };

    SortedSet.prototype.members_with_weight = function() {
      return this.sorted_member_weight_list();
    };

    SortedSet.prototype.rev_members_with_weights = function() {
      return this.members_with_weight().reverse();
    };

    SortedSet.prototype.members = function() {
      var m, _i, _len, _ref, _results;
      _ref = this.sorted_member_weight_list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        _results.push(m.key);
      }
      return _results;
    };

    SortedSet.prototype.revmembers = function() {
      return this.members().reverse();
    };

    SortedSet.prototype.weight = function(value) {
      if (!(value in this.store)) {
        return null;
      }
      return this.store[value];
    };

    SortedSet.prototype.increment = function(value, weight) {
      if (!!this.store[value]) {
        return this.add(value, this.weight(value) + weight);
      } else {
        return this.add(value, weight);
      }
    };

    return SortedSet;

  })(Set);

  GER_Models.Set = Set;

  GER_Models.SortedSet = SortedSet;

  Store = (function() {
    function Store(ivals) {
      if (ivals == null) {
        ivals = {};
      }
      this.store = ivals;
    }

    Store.prototype.set = function(key, value) {
      return q.fcall((function(_this) {
        return function() {
          _this.store[key] = value;
        };
      })(this));
    };

    Store.prototype.get = function(key) {
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key];
        };
      })(this));
    };

    Store.prototype.del = function(key) {
      return q.fcall((function(_this) {
        return function() {
          var value;
          value = _this.store[key];
          delete _this.store[key];
          return value;
        };
      })(this));
    };

    Store.prototype.sorted_set_incr = function(key, value, weight) {
      this._check_sorted_set(key);
      return q.fcall((function(_this) {
        return function() {
          _this.store[key].increment(value, weight);
        };
      })(this));
    };

    Store.prototype.sorted_set_add = function(key, value, weight) {
      if (weight == null) {
        weight = 1;
      }
      this._check_sorted_set(key);
      return q.fcall((function(_this) {
        return function() {
          _this.store[key].add(value, weight);
        };
      })(this));
    };

    Store.prototype.sorted_set_weight = function(key, value) {
      if (!(key in this.store)) {
        return q.fcall(function() {
          return null;
        });
      }
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key].weight(value);
        };
      })(this));
    };

    Store.prototype._check_sorted_set = function(key) {
      if (!(key in this.store)) {
        return this.store[key] = new SortedSet();
      }
    };

    Store.prototype._check_set = function(key) {
      if (!(key in this.store)) {
        return this.store[key] = new Set();
      }
    };

    Store.prototype.set_add = function(key, value) {
      this._check_set(key);
      return q.fcall((function(_this) {
        return function() {
          _this.store[key].add(value);
        };
      })(this));
    };

    Store.prototype.set_members = function(key) {
      if (!(key in this.store)) {
        return q.fcall((function(_this) {
          return function() {
            return [];
          };
        })(this));
      }
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key].members();
        };
      })(this));
    };

    Store.prototype.set_rev_members_with_weight = function(key) {
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key].rev_members_with_weights();
        };
      })(this));
    };

    Store.prototype.set_members_with_weight = function(key) {
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key].members_with_weight();
        };
      })(this));
    };

    Store.prototype.set_contains = function(key, value) {
      if (!(key in this.store)) {
        return q.fcall(function() {
          return false;
        });
      }
      return q.fcall((function(_this) {
        return function() {
          return _this.store[key].contains(value);
        };
      })(this));
    };

    Store.prototype.set_union_then_store = function(store_key, keys) {
      return q.fcall((function(_this) {
        return function() {
          var un;
          un = _this._union(keys);
          _this.store[store_key] = un;
          return un.size();
        };
      })(this));
    };

    Store.prototype.set_diff = function(keys) {
      return q.fcall((function(_this) {
        return function() {
          return _this._diff(keys).members();
        };
      })(this));
    };

    Store.prototype.set_union = function(keys) {
      return q.fcall((function(_this) {
        return function() {
          return _this._union(keys).members();
        };
      })(this));
    };

    Store.prototype.set_intersection = function(keys) {
      return q.fcall((function(_this) {
        return function() {
          return _this._intersection(keys).members();
        };
      })(this));
    };

    Store.prototype._diff = function(keys) {
      var k;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          k = keys[_i];
          _results.push(this.store[k]);
        }
        return _results;
      }).call(this)).reduce(function(s1, s2) {
        if ((s1 != null) && (s2 != null)) {
          return s1.diff(s2);
        } else if (s1 != null) {
          return new Set(s1.members());
        } else if (s2 != null) {
          return new Set(s2.members());
        } else {
          return new Set();
        }
      });
    };

    Store.prototype._union = function(keys) {
      var k;
      if (keys.length === 0) {
        return new Set();
      }
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          k = keys[_i];
          _results.push(this.store[k]);
        }
        return _results;
      }).call(this)).reduce(function(s1, s2) {
        if ((s1 != null) && (s2 != null)) {
          return s1.union(s2);
        } else if (s1 != null) {
          return new Set(s1.members());
        } else if (s2 != null) {
          return new Set(s2.members());
        } else {
          return new Set();
        }
      });
    };

    Store.prototype._intersection = function(keys) {
      var k;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          k = keys[_i];
          _results.push(this.store[k]);
        }
        return _results;
      }).call(this)).reduce(function(s1, s2) {
        if ((s1 != null) && (s2 != null)) {
          return s1.intersection(s2);
        } else {
          return new Set();
        }
      });
    };

    return Store;

  })();

  Utils = {
    flatten: function(arr) {
      return arr.reduce((function(xs, el) {
        if (Array.isArray(el)) {
          return xs.concat(Utils.flatten(el));
        } else {
          return xs.concat([el]);
        }
      }), []);
    },
    unique: function(arr) {
      var key, output, value, _i, _ref, _results;
      output = {};
      for (key = _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
        output[arr[key]] = arr[key];
      }
      _results = [];
      for (key in output) {
        value = output[key];
        _results.push(value);
      }
      return _results;
    }
  };

  KeyManager = {
    action_set_key: function() {
      return 'action_set';
    },
    person_thing_set_key: function(person, thing) {
      return "pt_" + person + ":" + thing;
    },
    person_action_set_key: function(person, action) {
      return "ps_" + person + ":" + action;
    },
    thing_action_set_key: function(thing, action) {
      return "ta_" + thing + ":" + action;
    },
    generate_temp_key: function() {
      var id, length;
      length = 8;
      id = "";
      while (id.length < length) {
        id += Math.random().toString(36).substr(2);
      }
      return id.substr(0, length);
    }
  };

  EventStoreMapper = (function() {
    function EventStoreMapper() {
      this.add_thing_to_person_action_set = __bind(this.add_thing_to_person_action_set, this);
      this.add_person_to_thing_action_set = __bind(this.add_person_to_thing_action_set, this);
      this.get_people_that_actioned_thing = __bind(this.get_people_that_actioned_thing, this);
      this.get_things_that_actioned_person = __bind(this.get_things_that_actioned_person, this);
      this.get_people_that_actioned_things = __bind(this.get_people_that_actioned_things, this);
      this.get_things_that_actioned_people = __bind(this.get_things_that_actioned_people, this);
      this.get_actions_of_person_thing_with_weights = __bind(this.get_actions_of_person_thing_with_weights, this);
      this.add_action_to_person_thing_set = __bind(this.add_action_to_person_thing_set, this);
      this.things_people_have_actioned = __bind(this.things_people_have_actioned, this);
      this.store = new Store;
      this.event_count = 0;
    }

    EventStoreMapper.prototype.count_events = function() {
      return q.when(this.event_count);
    };

    EventStoreMapper.prototype.add_event = function(person, action, thing) {
      this.event_count += 1;
      return q.all([this.add_action(action), this.add_thing_to_person_action_set(thing, action, person), this.add_person_to_thing_action_set(person, action, thing), this.add_action_to_person_thing_set(person, action, thing)]);
    };

    EventStoreMapper.prototype.events_for_people_action_things = function(people, action, things) {
      var events, p, person, _i, _len;
      p = [];
      events = [];
      for (_i = 0, _len = people.length; _i < _len; _i++) {
        person = people[_i];
        p.push(q.all([person, this.get_things_that_actioned_person(person, action)]));
      }
      return q.all(p).then(function(person_things) {
        var pt, thing, _j, _k, _len1, _len2;
        for (_j = 0, _len1 = person_things.length; _j < _len1; _j++) {
          pt = person_things[_j];
          person = pt[0];
          things = pt[1];
          for (_k = 0, _len2 = things.length; _k < _len2; _k++) {
            thing = things[_k];
            if (__indexOf.call(things, thing) >= 0) {
              events.push({
                person: person,
                action: action,
                thing: thing
              });
            }
          }
        }
        return events;
      });
    };

    EventStoreMapper.prototype.things_people_have_actioned = function(action, people) {
      var p;
      return this.store.set_union((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = people.length; _i < _len; _i++) {
          p = people[_i];
          _results.push(KeyManager.person_action_set_key(p, action));
        }
        return _results;
      })());
    };

    EventStoreMapper.prototype.has_person_actioned_thing = function(object, action, subject) {
      return this.store.set_contains(KeyManager.person_action_set_key(object, action), subject);
    };

    EventStoreMapper.prototype.add_action_to_person_thing_set = function(person, action, thing) {
      return this.store.set_add(KeyManager.person_thing_set_key(person, thing), action);
    };

    EventStoreMapper.prototype.get_actions_of_person_thing_with_weights = function(person, thing) {
      return q.all([this.store.set_members(KeyManager.person_thing_set_key(person, thing)), this.get_ordered_action_set_with_weights()]).spread(function(actions, action_weights) {
        var as, _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = action_weights.length; _i < _len; _i++) {
          as = action_weights[_i];
          if (_ref = as.key, __indexOf.call(actions, _ref) >= 0) {
            _results.push(as);
          }
        }
        return _results;
      });
    };

    EventStoreMapper.prototype.get_ordered_action_set_with_weights = function() {
      return this.store.set_rev_members_with_weight(KeyManager.action_set_key()).then(function(action_weights) {
        return action_weights.sort(function(x, y) {
          return y.weight - x.weight;
        });
      });
    };

    EventStoreMapper.prototype.add_action = function(action) {
      return this.get_action_weight(action).then((function(_this) {
        return function(existing_weight) {
          if (existing_weight === null) {
            return _this.store.sorted_set_add(KeyManager.action_set_key(), action);
          }
        };
      })(this));
    };

    EventStoreMapper.prototype.set_action_weight = function(action, weight) {
      return this.store.sorted_set_add(KeyManager.action_set_key(), action, weight);
    };

    EventStoreMapper.prototype.get_action_weight = function(action) {
      return this.store.sorted_set_weight(KeyManager.action_set_key(), action);
    };

    EventStoreMapper.prototype.get_things_that_actioned_people = function(people, action) {
      var p, person, _i, _len;
      if (people.length === 0) {
        return q.fcall(function() {
          return [];
        });
      }
      p = [];
      for (_i = 0, _len = people.length; _i < _len; _i++) {
        person = people[_i];
        p.push(this.get_things_that_actioned_person(person, action));
      }
      return q.all(p).then(function(peoples) {
        return Utils.flatten(peoples);
      });
    };

    EventStoreMapper.prototype.get_people_that_actioned_things = function(things, action) {
      var p, thing, _i, _len;
      if (things.length === 0) {
        return q.fcall(function() {
          return [];
        });
      }
      p = [];
      for (_i = 0, _len = things.length; _i < _len; _i++) {
        thing = things[_i];
        p.push(this.get_people_that_actioned_thing(thing, action));
      }
      return q.all(p).then(function(thingss) {
        return Utils.flatten(thingss);
      });
    };

    EventStoreMapper.prototype.get_things_that_actioned_person = function(person, action) {
      return this.store.set_members(KeyManager.person_action_set_key(person, action));
    };

    EventStoreMapper.prototype.get_people_that_actioned_thing = function(thing, action) {
      return this.store.set_members(KeyManager.thing_action_set_key(thing, action));
    };

    EventStoreMapper.prototype.add_person_to_thing_action_set = function(person, action, thing) {
      return this.store.set_add(KeyManager.thing_action_set_key(thing, action), person);
    };

    EventStoreMapper.prototype.add_thing_to_person_action_set = function(thing, action, person) {
      return this.store.set_add(KeyManager.person_action_set_key(person, action), thing);
    };

    EventStoreMapper.prototype.things_jaccard_metric = function(thing1, thing2, action_key) {
      var s1, s2;
      s1 = KeyManager.thing_action_set_key(thing1, action_key);
      s2 = KeyManager.thing_action_set_key(thing2, action_key);
      return q.all([this.store.set_intersection([s1, s2]), this.store.set_union([s1, s2])]).spread(function(int_set, uni_set) {
        var ret;
        ret = int_set.length / uni_set.length;
        if (isNaN(ret)) {
          return 0;
        }
        return ret;
      });
    };

    EventStoreMapper.prototype.people_jaccard_metric = function(person1, person2, action_key) {
      var s1, s2;
      s1 = KeyManager.person_action_set_key(person1, action_key);
      s2 = KeyManager.person_action_set_key(person2, action_key);
      return q.all([this.store.set_intersection([s1, s2]), this.store.set_union([s1, s2])]).spread(function(int_set, uni_set) {
        var ret;
        ret = int_set.length / uni_set.length;
        if (isNaN(ret)) {
          return 0;
        }
        return ret;
      });
    };

    return EventStoreMapper;

  })();

  EventStoreMapper.Store = Store;

  EventStoreMapper.GER_Models = GER_Models;

  if (typeof define !== 'undefined' && define.amd) {
    define([], function() {
      return EventStoreMapper;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = EventStoreMapper;
  }

}).call(this);
